import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML file into a main HTML page which links to other
 * HTML pages created from RSS links specified within the XML file.
 *
 * @author Justin Imber
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * Adds the html for the page title to the title variable, if the title
         * of the rss is available
         */
        int titleIndex = getChildElement(channel, "title");
        String title = "Empty Title";
        if (channel.child(titleIndex).numberOfChildren() > 0) {
            title = channel.child(titleIndex).child(0).label();
        }

        /*
         * Adds the html for the page link to the link variable
         */
        int linkIndex = getChildElement(channel, "link");
        String link = channel.child(linkIndex).child(0).label();

        /*
         * Adds the html for the page description to the description variable,
         * if the description of the rss is available
         */
        int descIndex = getChildElement(channel, "description");
        String description = "No description";
        if (channel.child(descIndex).numberOfChildren() > 0) {
            description = channel.child(descIndex).child(0).label();
        }

        /*
         * Outputs the previous variables in html format, as well as the html
         * header tags.
         */
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");

        out.println("<body>");
        out.println("<h1>");
        out.println("<a href=\"" + link + "\">" + title + "</a>");
        out.println("</h1>");

        out.println("<p>" + description + "</p>");

        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * outputs footer html
         */
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // default output value
        int childIndex = -1;
        // serves as index for which child # to check
        int iterations = 0;
        /*
         * Loops until all children of XMLTree element have been checked or
         * until the provided child tag is found - whichever comes first.
         */
        while (iterations < xml.numberOfChildren() && !(childIndex > -1)) {
            if (xml.child(iterations).label().equals(tag)
                    && xml.child(iterations).isTag()) {
                childIndex = iterations;
            }
            iterations++;
        }

        return childIndex;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * Finds the publication date, if it exists, and creates a table element
         * for it
         */
        out.println("<tr>");
        int dateIndex = getChildElement(item, "pubDate");
        String pubDate = "No date available";
        if (dateIndex > -1) {
            pubDate = item.child(dateIndex).child(0).label();
        }
        out.println("<td>" + pubDate + "</td>");

        /*
         * Finds the source value, if it exists, and creates a table element for
         * it, as well as hyperlinks the source's url if available.
         */
        int sourceIndex = getChildElement(item, "source");
        String source = "No source available";
        if (sourceIndex > -1) {
            source = "<a href=\""
                    + item.child(sourceIndex).attributeValue("url") + "\">";
            if (item.child(sourceIndex).numberOfChildren() > 0) {
                source = source + item.child(sourceIndex).child(0).label()
                        + "</a>";
            } else {
                source = source + "Source</a>";
            }
        }
        out.println("<td>" + source + "</td>");

        /*
         * Finds the title value, if it exists, and creates a table element for
         * it, as well as hyperlinks the news' url if a link child exists for
         * the item.
         */
        int titleIndex = getChildElement(item, "title");
        int linkIndex = getChildElement(item, "link");
        String title = "No title available";
        if (titleIndex > -1 && item.child(titleIndex).numberOfChildren() > 0) {
            title = item.child(titleIndex).child(0).label();
        }
        if (linkIndex >= 0) {
            title = "<a href=\"" + item.child(linkIndex).child(0).label()
                    + "\">" + title + "</a>";
        }

        out.println("<td>" + title + "</td>");

        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        /*
         * Creates a tree from the url in the feed node, then creates another
         * tree from the child of the first tree to use for fetching items from
         */
        XMLTree tree = new XMLTree1(url);
        XMLTree channel = tree.child(0);

        // Creates output writer for input file
        SimpleWriter fileWrite = new SimpleWriter1L(file);

        /*
         * The following code outputs all the HTML code for each feed's
         * individual HTML file
         */
        out.println("Generating header...");
        outputHeader(channel, fileWrite);
        out.println("Header complete!");

        out.println("Generating body...");
        for (int i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), fileWrite);
            }
        }
        out.println("Body complete!");

        out.println("Generating footer...");
        outputFooter(fileWrite);
        out.println("Footer complete!");

        out.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * Asks user for their xml file and stores it, as well as creates a tree
         * from the provided file
         */
        out.print("Please enter the name of an XML file: ");
        String userInFile = in.nextLine();
        XMLTree tree = new XMLTree1(userInFile);

        /*
         * Asks user for .html output file and creates a SimpleWriter form that
         * file name
         */
        out.print("Please enter the name of an output file (including .html "
                + "extension): ");
        String userOutFile = in.nextLine();
        SimpleWriter fileOut = new SimpleWriter1L(userOutFile);

        /*
         * Outputs the header for the main HTML file
         */
        fileOut.println("<html>");
        fileOut.println("<head>");
        fileOut.println("<title>" + tree.attributeValue("title") + "</title>");
        fileOut.println("</head>");
        fileOut.println("<body>");
        fileOut.println("<h2>" + tree.attributeValue("title") + "</h2>");
        fileOut.println("<ul>");

        /*
         * Loops through each feed within the user-provided XML to both generate
         * the new HTML files according to the feed and to add each feed's HTML
         * page link to the main HTML file in an unordered list
         */
        for (int i = 0; i < tree.numberOfChildren(); i++) {
            String storyFile = tree.child(i).attributeValue("file");
            String storyName = tree.child(i).attributeValue("name");
            processFeed(tree.child(i).attributeValue("url"), storyFile,
                    new SimpleWriter1L());
            fileOut.println("<li>");
            fileOut.println(
                    "<a href=\"" + storyFile + "\">" + storyName + "</a>");
            fileOut.println("</li>");
        }

        /*
         * Outputs the footer for the main HTML file
         */
        fileOut.println("</ul>");
        fileOut.println("</body>");
        fileOut.println("</html>");

        /*
         * Closes all still opened inputs/outputs
         */
        fileOut.close();

        in.close();
        out.close();
    }

}
