import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Justin Imber
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * Adds the html for the page title to the title variable, if the title
         * of the rss is available
         */
        int titleIndex = getChildElement(channel, "title");
        String title = "Empty Title";
        if (channel.child(titleIndex).numberOfChildren() > 0) {
            title = channel.child(titleIndex).child(0).label();
        }

        /*
         * Adds the html for the page link to the link variable
         */
        int linkIndex = getChildElement(channel, "link");
        String link = channel.child(linkIndex).child(0).label();

        /*
         * Adds the html for the page description to the description variable,
         * if the description of the rss is available
         */
        int descIndex = getChildElement(channel, "description");
        String description = "No description";
        if (channel.child(descIndex).numberOfChildren() > 0) {
            description = channel.child(descIndex).child(0).label();
        }

        /*
         * Outputs the previous variables in html format, as well as the html
         * header tags.
         */
        out.println("<html>\n<head>\n<title>" + title + "</title>\n</head>");

        out.println("<body>\n<h1>\n<a href=\"" + link + "\">" + title
                + "</a>\n</h1>");

        out.println("<p>" + description + "</p>");

        out.println("<table border=\"1\">\n<tr>\n<th>Date</th>\n<th>Source"
                + "</th>\n<th>News</th>\n</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * outputs footer html
         */
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // default output value
        int childIndex = -1;
        // serves as index for which child # to check
        int iterations = 0;
        /*
         * Loops until all children of XMLTree element have been checked or
         * until the provided child tag is found - whichever comes first.
         */
        while (iterations < xml.numberOfChildren() && !(childIndex > -1)) {
            if (xml.child(iterations).isTag()
                    && xml.child(iterations).label().equals(tag)) {
                childIndex = iterations;
            }
            iterations++;
        }

        return childIndex;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * Finds the publication date, if it exists, and creates a table element
         * for it
         */
        out.println("<tr>");
        int dateIndex = getChildElement(item, "pubDate");
        String pubDate = "No date available";
        if (dateIndex > -1 && item.child(dateIndex).numberOfChildren() > 0) {
            pubDate = item.child(dateIndex).child(0).label();
        }
        out.println("<td>" + pubDate + "</td>");

        /*
         * Finds the source value, if it exists, and creates a table element for
         * it, as well as hyperlinks the source's url if available.
         */
        int sourceIndex = getChildElement(item, "source");
        String source = "No source available";
        if (sourceIndex > -1) {
            source = "<a href=\""
                    + item.child(sourceIndex).attributeValue("url") + "\">";
            if (item.child(sourceIndex).numberOfChildren() > 0) {
                source += item.child(sourceIndex).child(0).label() + "</a>";
            } else {
                source += "Source</a>";
            }
        }
        out.println("<td>" + source + "</td>");

        /*
         * Finds the title value, if it exists, and creates a table element for
         * it, as well as hyperlinks the news' url if a link child exists for
         * the item.
         */
        int titleIndex = getChildElement(item, "title");
        int linkIndex = getChildElement(item, "link");
        String title = "No title available";
        if (titleIndex > -1 && item.child(titleIndex).numberOfChildren() > 0) {
            if (linkIndex >= 0) {
                title = "<a href=\"" + item.child(linkIndex).child(0).label()
                        + "\">" + item.child(titleIndex).child(0).label()
                        + "</a>";
            } else {
                title = item.child(titleIndex).child(0).label();
            }
        }
        out.println("<td>" + title + "</td>");

        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * Asks user for their rss feed and stores it, as well as creates a tree
         * from the provided url
         */
        out.print("Please enter the URL of an RSS 2.0 feed: ");
        String userURL = in.nextLine();
        XMLTree tree = new XMLTree1(userURL);
        /*
         * Checks that the rss is valid. If invalid, tells user.
         */
        if (tree.label().equals("rss") && tree.hasAttribute("version")
                && tree.attributeValue("version").equals("2.0")) {
            /*
             * Asks user for .html output file, then finds channel child of tree
             * variable
             */
            out.print(
                    "Please enter the name of an output file (including .html "
                            + "extension): ");
            String userFile = in.nextLine();
            SimpleWriter fileOut = new SimpleWriter1L(userFile);
            XMLTree channel = tree.child(0);

            /*
             * runs methods to output .html file text
             */
            outputHeader(channel, fileOut);

            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), fileOut);
                }
            }

            outputFooter(fileOut);

            fileOut.close();
        } else {
            out.println("Invalid RSS feed provided. Try again.");
        }

        in.close();
        out.close();
    }

}
